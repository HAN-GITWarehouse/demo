/*! For license information please see game-animation.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Games=t():e.Games=t()}(self,(function(){return(()=>{"use strict";var e={d:(t,o)=>{for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>B});class o extends PIXI.Application{constructor(e){super({width:e.width,height:e.height,antialias:!0,transparent:1,resolution:3,roundPixels:!0}),console.log("pixi utils is mobile: ",PIXI.utils.isMobile),console.log("pixi WebGL Supported:",PIXI.utils.isWebGLSupported()),console.log("pixi utils url:",PIXI.utils.url),console.log("pixi utils url:",PIXI.utils.url),this.renderer.view.style.position="static",this.renderer.view.style.display="block",this.renderer.view.style.margin="auto",this.renderer.autoResize=!0,this.stage.sortableChildren=!0;const t=()=>{const t=960/540;let o=Math.max(e.element.clientWidth||0,e.element.innerWidth||0,e.element.offsetWidth||0),n=Math.max(e.element.clientHeight||0,e.element.innerHeight||0,e.element.offsetHeight||0);o/n>=t?o=n*t:n=o/t,console.log(`resize: cw: 960, ch: 540, vw:${o}, vh:${n}, ration:${t}`),this.renderer.view.style.width=o+"px",this.renderer.view.style.height=n+"px"};window.onresize=t.bind(this),window.addEventListener("resize",t.bind(this)),t()}}class n{constructor(e){this._options=e,this._tween=createjs.Tween.get(e.target,{loop:void 0!==e.loop&&e.loop}),this.run()}get options(){return this._options}get tween(){return this._tween}run(){const e=this._options;console.log("action options:",e),void 0!==e.frame&&null!==e.frame&&void 0!==e.target&&null!==e.target&&(console.log(`action(frame[${e.frame.id}]) start`),void 0!==e.frame.tweens&&null!==e.frame.tweens&&"object"==typeof e.frame.tweens&&void 0!==e.frame.tweens.to&&Array.isArray(e.frame.tweens.to)&&null!==e.frame.tweens.to[0]?(void 0===e.frame.tweens.to[0].p||void 0===e.frame.tweens.to[0].p.alpha?e.target.alpha=1:e.target.alpha=e.frame.tweens.to[0].p.alpha,void 0!==e.frame.tweens.wait&&null!==e.frame.tweens.wait&&Number.isInteger(e.frame.tweens.wait)&&(console.log(`action(frame[${e.frame.id}])  to: `,e.frame.tweens),this._tween.wait(e.frame.tweens.wait)),console.log(`action(frame[${e.frame.id}])  to: `,e.frame.tweens),e.frame.tweens.to.forEach((t=>{console.log(`action(frame[${e.frame.id}])  to: `,t),this._tween.to(t.p,t.s,createjs.Ease.getPowInOut(4))})),this._tween.label("last"),void 0!==e.complete&&this._tween.call(e.complete),console.log(`action(frame[${e.frame.id}]) end, frame[${e.frame.id}]`)):e.target.alpha=void 0===e.frame.frame||void 0===e.frame.frame.alpha||null===e.frame.frame.alpha?e.target.alpha=1:e.frame.frame.alpha)}}const s={default:{fontFamily:"Blue Sky Noto-Regular",fontSize:15,fontWeight:"bold"},title:{fontFamily:"Blue Sky Noto-Regular",fontSize:20},"title-en":{fontFamily:"Blue Sky Noto-Light",fontSize:20,fontWeight:"bold"},"text-little-en":{fontFamily:"Blue Sky Noto-Light",fontSize:10},text:{fontFamily:"Blue Sky Noto-Light",fontSize:12,lineHeight:20,letterSpacing:1},"text-en":{fontFamily:"Blue Sky Noto-Light",fontSize:12},"text-en-h":{fontFamily:"Blue Sky Noto-Light",fontSize:12,lineHeight:20,letterSpacing:1},"title-highlight":{fontFamily:"Blue Sky Noto-Light",fontSize:18,fill:"#48BEBE"},"title-highlight-en":{fontFamily:"Blue Sky Noto-Light",fontSize:15,fill:"#48BEBE"},"title-letter":{fontFamily:"Blue Sky Noto-Regular",fontSize:18},"title-letter-en":{fontFamily:"Blue Sky Noto-Light",fontSize:15},"blue-ligth-20":{fontFamily:"Blue Sky Noto-Light",fontSize:20},"blue-ligth-20-bold":{fontFamily:"Blue Sky Noto-Light",fontSize:20,fontWeight:"bold"},"blue-ligth-15":{fontFamily:"Blue Sky Noto-Light",fontSize:15},"blue-ligth-15-b":{fontFamily:"Blue Sky Noto-Light",fontSize:15,fill:"#48BEBE"},"blue-ligth-10":{fontFamily:"Blue Sky Noto-Light",fontSize:10},"blue-ligth-10-h":{fontFamily:"Blue Sky Noto-Light",lineHeight:17,fontSize:10},"blue-ligth-10-b":{fontFamily:"Blue Sky Noto-Light",fontSize:10,fill:"#48BEBE"}},i=(e,t)=>`/assets/pages/${e}/pc/${t}`;class a extends PIXI.Graphics{constructor(e){super();const t=e.el.drawings,o=e=>{console.log(`drawing control, method: ${e.method}, args:`,e.args,this[e.method]),e.args.forEach(((t,o)=>{console.log(`drawing control, check is hex args(${t}):`,/^0x[0-9A-F]{6}$/i.test(t)),e.args[o]=/^0x[0-9A-F]{6}$/i.test(t)?parseInt(t,16):t})),console.log("drawing control, format args:",e.args),Reflect.apply(this[e.method],this,e.args)};t.forEach((e=>{this.beginFill(e.color,e.alpha),e.drawing.forEach(o.bind(this)),this.endFill()}))}test(e){console.log("drawing control, this is test.")}}class l extends PIXI.Container{constructor(e){super(),this._options=e,this.addContent(e.frame)}getStyle(e){return s[e]}reloadContent(e){this._options=e,this.children.forEach((e=>{e.parent.removeChild(e)})),this.addContent(e.frame)}addContent(e){console.log("data:",e),this.name=e.id,this.x=e.frame.x,this.y=e.frame.y;let t=[];if(Array.isArray(e.content))t=e.content;else{let o={p:{x:e.frame.x,y:e.frame.y}};"img"==e.type?e.url=e.content:e.text=e.content,t.push(o)}console.log("sprite add content, frame content: ",e.content,t),t.forEach(this.addItems.bind(this))}addItems(e){if(console.log("sprite add item, el: ",e),void 0===e.type)return;if("txt"===e.type){const t=void 0!==e["style-type"]?this.getStyle(e["style-type"]):e.style;console.log("sprite add item, style: ",e.text,t),PIXI.utils.isMobile.apple.device&&("bold"===t.fontWeight?t.letterSpacing=-1.4:t.letterSpacing=-.2,console.log("sprite add item, apple, style: ",e.text,t));const o=new PIXI.Text(e.text,new PIXI.TextStyle(t));return console.log("sprite add item, el.p: ",e.p,e),void 0!==e.p&&(o.x=e.p.x,o.y=e.p.y),void this.addChild(o)}const t={el:e,base_url:i(this._options.texture.id,this._options.texture.lang),frame:this._options.frame,texture:this._options.texture};switch(console.log(`sprite add item, img: ${e.url}, type: ${e.type} `,e),e.type){case"ant":console.log("sprite add item, to create animated sprite: ",e),this.createAnimatedSprite(t);break;case"img":this.loadImageTexture(t);break;case"draw":const o=new a({el:e});this.setting(Object.assign(t,{sprite:o})),this.addChild(o)}}createAnimatedSprite(e){if(console.log("sprite create animated sprite, options: ",e),void 0===e.el.range)return new PIXI.Text("未找到动画的rang配置");const t=new PIXI.Loader,o=e.el,n=[],s=o.range;for(let n=s.start;n<=s.end;n++){if(n>1e3||n<0)return new PIXI.Text("未找到动画的rang配置");const s=`${e.base_url}/${o.url}.${n}.jpg`;t.add(`${o.url}-${n}`,s)}t.load(),t.onComplete.add(((t,s)=>{console.log("sprite create animated sprite, resources: ",s),Object.keys(s).forEach((e=>{console.log("sprite create animated sprite, resource: ",s[e].texture),n.push(s[e].texture)}));const i=new PIXI.AnimatedSprite(n);this.setting(Object.assign(e,{sprite:i,base_texture:n[0].baseTexture})),i.loop=void 0!==o.loop&&o.loop,i.animationSpeed=.5,i.play(),this.addChild(i)}).bind(this))}loadImageTexture(e){console.log("sprite add item, options: ",e);const t=e.el;let o=`${i(this._options.texture.id,this._options.texture.lang)}/`;console.log("sprite add item, img, el: ",t),o="object"==typeof t?`${o}${t.url}`:`${o}${t}`;let n=new PIXI.BaseTexture(o);const s=this.createImageSprite.bind(this);if(n.hasLoaded)return console.log("sprite add item, base texture has loaded: ",o),void this.addChild(s(Object.assign(e,{url:o,base_texture:new PIXI.Texture(n)})));n.on("loaded",(()=>{const t=s(Object.assign(e,{url:o,base_texture:new PIXI.Texture(n)}));console.log("sprite add item, base texture load complete: ",o,t,this),this.addChild(t)}).bind(this))}createImageSprite(e){console.log(`sprite create image(${e.url}) sprite, options:`,e),console.log(`sprite create image(${e.url}) sprite, texture w:${e.texture.width}, h: ${e.texture.height}`);const t=new PIXI.Sprite(e.base_texture);return console.log("sprite create image(${options.url}) sprite: ",t,e.base_texture),console.log(`sprite create image(${e.url}) sprite, bitmap w:${t.width}, h: ${t.height}`),this.setting(Object.assign(e,{sprite:t,base_texture:e.base_texture})),t}setting(e){console.log("sprite setting, options: ",e);const t=e.el,o=e.frame,n=e.sprite;void 0!==t.flow&&null!==t.flow&&(n.interactive=!0,n.on("pointerdown",(e=>{location.href=t.flow}))),void 0===o.sourceSize&&(o.sourceSize={}),void 0!==e.base_texture&&(console.log("sprite setting, base_texture: ",e.base_texture),o.sourceSize.w=e.base_texture.width,o.sourceSize.h=e.base_texture.height),console.log("sprite setting, data.sourceSize.scale.ratio: ",o.sourceSize,o),void 0===o.sourceSize.scale||void 0===o.sourceSize.scale.ratio?(console.log("sprite setting, data.sourceSize.scale.ratio: no exists."),void 0!==o.frame.w&&(n.width=o.frame.w),void 0!==o.frame.h&&(n.height=o.frame.h)):(console.log("sprite setting, data.sourceSize.scale.ratio:",o.sourceSize.scale.ratio),n.scale.set(o.sourceSize.scale.ratio)),void 0===o.tweens||null===o.tweens?(this.x=o.frame.x,this.y=o.frame.y):void 0!==o.tweens.to&&Array.isArray(o.tweens.to)&&o.tweens.to.length>0&&null!==o.tweens.to[0]&&void 0!==o.tweens.to[0].p&&(this.x=o.tweens.to[0].p.x,this.y=o.tweens.to[0].p.y,void 0!==o.tweens.to[0].p.alpha?this.alpha=o.tweens.to[0].p.alpha:this.alpha=1),console.log("sprite setting, complete.")}}class r{constructor(e){}}const c=()=>JSON.parse('\n    {\n      "id": "44efbeb7-c354-4210-a619-156ca8073001",\n      "name": null,\n      "rotated": 0,\n      "trimmed": 1,\n      "texture_id": "22875a3d-ea08-46d4-aafe-5fce1848b2ab",\n      "animation": null,\n      "tweens": null,\n      "style": {\n        "animation": "bounceInUp 0.5s 2s ease both",\n        "marginLeft": "4vw",\n        "width": "26vw"\n      },\n      "label": null,\n      "type": "img",\n      "content": null,\n      "flow": null,\n      "frame": {\n        "id": "d377e3cc-26d3-4aaa-9d3a-44e0a0497058",\n        "texture_frames_id": "44efbeb7-c354-4210-a619-156ca8073001",\n        "x": "0",\n        "y": "0",\n        "w": null,\n        "h": null\n      },\n      "pivot": {\n        "id": "69e7b9b6-eb39-4a28-bd57-0e82154c237b",\n        "texture_frames_id": "2B552F1F-7918-40DD-8A2C-06BF29AFF063",\n        "x": 510,\n        "y": 500\n      },\n      "sourceSize": {\n        "id": "18d8aab5-28f9-463f-b27f-59eed35b1032",\n        "texture_frames_id": "2B552F1F-7918-40DD-8A2C-06BF29AFF063",\n        "w": null,\n        "h": null,\n        "scale": {\n          "desc": "缩放比例",\n          "ratio": 1\n        }\n      },\n      "spriteSourceSize": {\n        "id": "1d8e82a2-877d-468d-8dae-731068e0e862",\n        "texture_frames_id": "2B552F1F-7918-40DD-8A2C-06BF29AFF063",\n        "x": 0,\n        "y": 0,\n        "w": 375,\n        "h": 812\n      }\n    }\n    ');class d{constructor(e){this.content_id=e.content_id,this._tweens=[]}set tweens(e){this._tweens=e}get tweens(){return this._tweens}push(e){console.log("schedule frame: ",e.frame);const t=e.sceen.children.find((t=>t.name===e.frame.id));void 0!==t&&t.parent.removeChild(t),this._tweens=this._tweens.filter((t=>t.name!==e.frame.id));const o=new l({frame:e.frame,texture:e.texture});e.sceen.addChild(o),new r({sceen:e.sceen,target:o,frame:e.frame,texture:e.texture});const s={id:c.id,target:o,frame:e.frame};if(console.log("push options: ",s),console.log("data.animation: ",e.frame.animation),void 0===e.frame.tweens||null===e.frame.tweens)return s;this._tweens.push(new n(s)),console.log("tweens push: ",this._tweens,this._tweens)}}PIXI.Container,PIXI.Container,PIXI.Container,PIXI.Container,PIXI.Container;var f=PIXI.LoaderResource;function u(e){const t=/\s*([a-z\-]+)\s*:\s*((?:[^;]*url\(.*?\)[^;]*|[^;]*)*)\s*(?:;|$)/gi,o={};let n;for(;n=t.exec(e);)o[n[1].toLowerCase()]=n[2];return o}function h(e){let t="";const o=Object.keys(e).sort();for(let n=0;n<o.length;n++)t+=` ${o[n]}: ${e[o[n]]};`;return t.substring(1)}function p(e,t){return null!=e?e:t()}function g(e){let t,o=e[0],n=1;for(;n<e.length;){const s=e[n],i=e[n+1];if(n+=2,("optionalAccess"===s||"optionalCall"===s)&&null==o)return;"access"===s||"optionalAccess"===s?(t=o,o=i(o)):"call"!==s&&"optionalCall"!==s||(o=i(((...e)=>o.call(t,...e))),t=void 0)}return o}class m{static __initStatic(){this.supportedFontExtensions=["ttf","otf","woff","woff2"]}static add(...e){if(!document.fonts||!FontFace||!Promise)throw new Error("WebfontLoaderPlugin relies heavily on Promises and the FontFace API and your browser doesn't support them.");f.setExtensionLoadType("css",f.LOAD_TYPE.XHR),f.setExtensionXhrType("css",f.XHR_RESPONSE_TYPE.TEXT),f.setExtensionLoadType("ttf",f.LOAD_TYPE.XHR),f.setExtensionXhrType("ttf",f.XHR_RESPONSE_TYPE.BUFFER);for(const e of m.supportedFontExtensions)f.setExtensionLoadType(e,f.LOAD_TYPE.XHR),f.setExtensionXhrType(e,f.XHR_RESPONSE_TYPE.BUFFER)}static use(e,t){e.extension.endsWith("css")||e.extension.endsWith("css2")?m.loadFromCSS(e).finally((()=>t())):m.supportedFontExtensions.some((t=>e.extension.endsWith(t)))?m.loadFromBuffer(e).finally((()=>t())):t()}static __initStatic2(){this.waitFont=async(e,t,o)=>{const n=p(e["font-style"],(()=>"")),s=p(e["font-weight"],(()=>"")),i=p(e["font-stretch"],(()=>"")),a=e["font-family"];o=o||1/0;let l=(new Date).getTime();const r=l,c=[n,s,i,"100px",a].join(" ");let d=0;do{if(d=(await document.fonts.load(c,t)).length,d>0)return;await new Promise((e=>setTimeout(e,16))),l=(new Date).getTime()}while(l-r<o);console.warn(`Error loading font! Your font ${e["font-family"]} timed out after ${o}ms`)}}static loadFromCSS(e){const t=document.createElement("link");t.rel="stylesheet",t.type="text/css",t.href=e.url,document.head.appendChild(t);const o=function(e){const t=/([\s\S]+?)\{([\s\S]*?)\}/gi,o=[];let n,s;for(e=e.replace(/\/\*[\s\S]*?\*\//g,"");s=t.exec(e);){const e=u(s[2].trim());e.cssText=h(e),n={selectorText:s[1].trim().replace(/\s*\,\s*/,", "),style:e,cssText:""},n.cssText=`${n.selectorText} { ${n.style.cssText} }`,o.push(n)}return o}(e.data),n=[],s=[],i=g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.testString]),a=p(g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.timeout]),(()=>e.timeout));for(const e of o)"string"==typeof e.style["font-family"]&&(n.push(m.waitFont(e.style,i,a)),s.push({fontFamily:e.style["font-family"].replace(/['|"]/gi,""),fontStyle:e.style["font-style"],fontWeight:e.style["font-weight"]}));return e.styles=s,Promise.all(n)}static loadFromBuffer(e){const t=p(g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.family]),(()=>e.name));return document.fonts.add(new FontFace(t,e.data,g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font]))),e.styles=[{fontFamily:t.replace(/['|"]/gi,""),fontStyle:g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.style]),fontWeight:g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.weight])}],m.waitFont({"font-family":t,"font-stretch":g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.stretch]),"font-style":g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.style]),"font-weight":g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.weight])},g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.testString]),p(g([e,"access",e=>e.metadata,"optionalAccess",e=>e.font,"optionalAccess",e=>e.timeout]),(()=>e.timeout)))}}m.__initStatic(),m.__initStatic2(),PIXI.Loader.registerPlugin(m);class w{constructor(e){return w.instance||(this._loaded=!1,w.instance=this),w.instance}get onComplete(){return this._onComplete}set onComplete(e){this._onComplete=e}get loaded(){return this._loaded}get fonts(){return[{fontName:"Blue Sky Noto-Bold",fontFile:"/assets/font/min/Blue-Sky-Noto-Bold.otf"},{fontName:"Blue Sky Noto-Light",fontFile:"/assets/font/min/Blue-Sky-Noto-Light.otf"},{fontName:"Blue Sky Noto-Regular",fontFile:"/assets/font/min/Blue-Sky-Noto-Regular.otf"}]}addText(e,t){void 0===this._texts&&(this._texts=[]),this._texts.push([e,t])}get texts(){return this._texts}load(){this.fonts.forEach((e=>{console.log(`font(${e.fontName}: ${e.fontFile}) add.`),PIXI.Loader.shared.add({name:e.fontName,url:e.fontFile})})),PIXI.Loader.shared.onComplete.add((()=>{this._loaded=!0,void 0!==this._onComplete&&null!==this._onComplete&&this._onComplete()}).bind(this)),PIXI.Loader.shared.load()}}const y=new w({});PIXI.utils.skipHello();let x=null,S=null;const b={id:null,lang:null},_=e=>{console.log("app window.location.search: ",window.location.search);let t=new URLSearchParams(window.location.search);if(!t.has("id"))return void console.error("texture id not exists.");if(!t.has("lang"))return void console.error("texture lang not exists.");const o=t.get("id"),n=t.get("lang");v(o,n)},v=(e,t)=>{null!=F()&&(b.id=e,b.lang=t,I((()=>{P(),E()})))},I=e=>{y.loaded?e():null!=F()&&(y.onComplete=()=>{e()},y.load())},F=()=>{const e=document.getElementById("sceen");return null!==e?e:null},P=()=>{console.log("app init");const e=F();null==x&&(x=new o({width:960,height:540,element:e})),null==S&&(S=x.stage),null!=x&&null!=S?(e.innerHTML="",e.appendChild(x.view)):console.error("app init, app stage element: ",x,S,e)},E=()=>{const e=`/assets/pages/${b.id}/pc/${b.lang}/texture.json`;console.log("load texure url: ",e),axios.create({baseURL:"/"}),axios.get(e).then($)},A=e=>{console.log("background-color: ",e);const t=document.getElementsByClassName("container");console.log("doms: ",t),t.length>0&&(t.item(0).style["background-color"]=e.startsWith("#")?e:`#${e}`)},$=e=>{const t=e.data;console.log("load texture response: ",t),S.children.forEach((e=>{S.removeChild(e)}));var o=new PIXI.Container;o.x=0,o.y=0,S.addChild(o);const n=new d({content_id:t.id});void 0!==t.style&&void 0!==t.style["background-color"]?A(t.style["background-color"]):null!=t.content&&void 0!==t.content.bgcolor?A(t.content.bgcolor):A("#fff"),null===t||void 0===t.frames||null==t.frames||t.frames.length<=0||(t.lang=b.lang,console.log("texture.frames: ",t.frames),o.children.forEach((e=>{o.removeChild(e)})),t.frames.forEach((e=>{console.log(`app load frame, texture id: ${t.id}, frame id:${e.id}, content:${JSON.stringify(e.content)}`),n.push({sceen:o,frame:e,texture:t})})),console.log("app tween interactive setting: ",o.interactive),x.stage.interactive=!0,console.log("app tween interactive setting: ",o.interactive),void 0!==window.game.complete&&(void 0!==n.tweens&&Array.isArray(n.tweens)&&n.tweens.length>0?n.tweens[n.tweens.length-1].tween.call((()=>{window.game.complete({sceen:o,texture:t})})):window.game.complete({sceen:o,texture:t})),x.renderer.plugins.interaction.on("pointerdown",(e=>{if(null===n||void 0===n.tweens||Array.isArray(n)||0===n.tweens.length)return;const s=n.tweens.filter((e=>(console.log("app tween current lable: ",e.tween.currentLabel),"last"!==e.tween.currentLabel)));if(0===s.length){if(void 0===window.game.complete)return;return void window.game.complete({sceen:o,texture:t})}const i=s[0].options,a=s[0].tween;console.log("app tweens length: ",n.tweens.length),console.log("app tween stop: ",a),console.log("app tween options: ",i),console.log("app tween options target: ",i.target),console.log("app tween tween: ",a),a.gotoAndStop("last"),i.target.alpha=1,console.log("app tweens slice after length: ",n.tweens.length)})))};window.game={init:_,render:v};const B={render:v,init:_,load:(e,t)=>{window.addEventListener("load",(()=>{console.log("games: ",Games),Games.render(e,t)}),{once:!0})}};return t})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,